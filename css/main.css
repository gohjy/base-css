:where(:root) {
    /* custom-font should have been imported and set in a <style> element before this stylesheet is embedded */
    /* Example: [load Inter from Google Fonts CSS CDN] <style> :root { --custom-font: "Inter"; } </style> */
    /* Headers will display in Inter, or failing that, the system font stack */
    --header-font: var(--custom-font), var(--body-font);

    --sans-serif-font: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; /* Sans-serif font */
    --serif-font: "Iowan Old Style", "Apple Garamond", "Baskerville", "Times New Roman", "Droid Serif", Times, "Source Serif Pro", serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; /* Serif font */
    --monospace-font: Menlo, Consolas, Monaco, "Liberation Mono", "Lucida Console", "Courier New", Courier, monospace;
    /* These variable font stacks can easily be overridden with custom CSS */

    /* Sans-serif system font stack from VSCode suggested */
    /* Serif system & monospace font stack from 101 UX Principles (2nd edition) by Will Grant */
    /* Note: the amount of content used is not substantial enough to be copyright infringing */

    /* Set to sans-serif by default */
    --body-font: var(--sans-serif-font);

    /* Body padding amount */
    --body-pad: 10px;
}

@media (prefers-color-scheme: light) {
    /* In light mode, set the text color to black by default */
    :where(:root:not(.dark)) {
        --text-color: #000000;
        --bg-color: #ffffff;
    }
}
:where(:root.light) {
    --text-color: #000000;
    --bg-color: #ffffff;
}

/* In dark mode, set the text color to white by default */
:where(:root:not(.light)) {
    --text-color: #ffffff;
    --bg-color: #000000;
}

/* Set --text-color in your CSS to specify a different text color (or set color in body directly) */

:where(:root.serif) {
    /* If we want a serif font instead: */
    --body-font: var(--serif-font);
}
:where(:root.monospace) {
    /* Ditto for monospace */
    --body-font: var(--monospace-font);
}

* {
    box-sizing: border-box;
    text-decoration-skip-ink: all;
}

:where(html) {
    scroll-behavior: smooth;
}

:where(body) {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: var(--body-pad);

    font-size: 20px;

    font-family: var(--body-font);
    color: var(--text-color);
    background-color: var(--bg-color);

    line-height: 1.5;
}

:where(body.pad-inner, :root.pad-inner body) {
    padding: 0;
}
:where(body.pad-inner > *, :root.pad-inner body > *) {
    padding: var(--body-pad);
}

:where(button, input, select, optgroup, textarea, option) {
    font-family: var(--body-font);
    font-size: inherit;
}

:where(h1, h2, h3, h4, h5, h6) {
    font-family: var(--header-font);
}

:where(table, tr, th, td) {
    border-collapse: collapse;
    border-color: unset;
}

/* These are Chrome UA styles */
:where(h1) {
    margin-block: 0.67em;
    font-size: 2em;
}
:where(h2) { 
    margin-block: 0.83em;
    font-size: 1.5em;
}
:where(h3) {
    margin-block: 1em;
    font-size: 1.17em;
}

/* Shortcuts */
:where(.bold) { font-weight: bold; }
:where(.italic) { font-style: italic; }
:where(.underline, .uline) { text-decoration-line: underline; }
:where(.overline) { text-decoration-line: overline; }
:where(.strike) { text-decoration-line: line-through; }
:where(:is(.uline, .underline).strike) { text-decoration-line: underline line-through; }
:where(.overline.strike) { text-decoration-line: overline line-through; }
:where(:is(.uline, .underline).overline) { text-decoration-line: underline overline; }
:where(:is(.uline, .underline).overline.strike) { text-decoration-line: underline overline line-through; }

:where(.textcent, .textcenter) { text-align: center; }
:where(.textleft) { text-align: left; }
:where(.textright) { text-align: right; }
:where(.textjust, .textjustify) { text-align: justify; }

:where(.big) { font-size: 1.5em; }
:where(.small) { font-size: 0.8em; }

:where(h1.big) { font-size: 2.5em; }
/* For anything else just use a different h* tag */

:where(.sans-serif) { font-family: var(--sans-serif-font); }
:where(:not(:root).serif) { font-family: var(--serif-font); }

:where(.flex) { display: flex; }
:where(.flexcenter) {
    /* Perfect centering with flexbox */
    display: flex;
    justify-content: center;
    align-items: center;
}

:where(:root.has-sticky :target) {
    /* If there is a sticky element at the top (for example, a navbar), this tells the browser to always position the target element (#id) that height below */
    /* Requires setting --sticky-height in your own CSS */
    scroll-margin-top: var(--sticky-height, 0);
}

:where(.full-width) { width: 100%; }
:where(.full-height) { height: 100%; }

:where(.invisible) { display: none; }

/* Specific element styles */

:where(hr) {
    border-bottom: none;
    border-left: none;
    border-right: none;
    border-top-width: 2px;
    border-top-style: solid;
    /* Inherits color, and as such border-color as well */
    color: var(--hr-color, inherit);
    /* Set the --hr-color variable in your own CSS to specify a color */ 
    padding: 0;
}